#!/usr/bin/env python3
"""
MyJKKN API Client Generator

This script generates framework-specific API client code for integrating with MyJKKN Parent App API.

Usage:
    python generate_api_client.py --framework nextjs --output ./lib/api
    python generate_api_client.py --framework vanilla --output ./src/api
    python generate_api_client.py --framework express --output ./services
"""

import argparse
import os
import sys
from pathlib import Path

# Template for Next.js/React API Client
NEXTJS_TEMPLATE = '''// MyJKKN API Client for Next.js
// Generated by generate_api_client.py

const API_URL = process.env.NEXT_PUBLIC_MYJKKN_API_URL || 'https://jkkn.ai/api';
const API_KEY = process.env.MYJKKN_API_KEY;

export class ApiError extends Error {
  constructor(message: string, public status: number, public code?: string) {
    super(message);
    this.name = 'ApiError';
  }
}

interface ApiRequestOptions {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
  headers?: Record<string, string>;
  body?: any;
  signal?: AbortSignal;
}

class MyJKKNApiClient {
  private baseURL: string;
  private apiKey: string;

  constructor(baseURL: string, apiKey: string) {
    this.baseURL = baseURL;
    this.apiKey = apiKey;
  }

  private async request<T>(
    endpoint: string,
    options: ApiRequestOptions = {}
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    const { method = 'GET', headers = {}, body, signal } = options;

    try {
      const response = await fetch(url, {
        method,
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          ...headers,
        },
        body: body ? JSON.stringify(body) : undefined,
        signal,
      });

      if (!response.ok) {
        const error = await response.json().catch(() => ({ error: 'Request failed' }));
        throw new ApiError(
          error.error || `HTTP ${response.status}`,
          response.status
        );
      }

      return response.json();
    } catch (error) {
      if (error instanceof ApiError) {
        throw error;
      }
      throw new ApiError(
        error instanceof Error ? error.message : 'Network error',
        0
      );
    }
  }

  private buildQueryString(params: Record<string, any>): string {
    const filtered = Object.entries(params).filter(
      ([_, value]) => value !== undefined && value !== null && value !== ''
    );

    if (filtered.length === 0) return '';

    return (
      '?' +
      filtered
        .map(([key, value]) =>
          `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`
        )
        .join('&')
    );
  }

  // Students API
  students = {
    list: (filters: any = {}) => {
      const queryString = this.buildQueryString(filters);
      return this.request(`/api-management/students${queryString}`);
    },
    get: (id: string) => {
      return this.request(`/api-management/students/${id}`);
    },
  };

  // Staff API
  staff = {
    list: (filters: any = {}) => {
      const queryString = this.buildQueryString(filters);
      return this.request(`/api-management/staff${queryString}`);
    },
    get: (id: string) => {
      return this.request(`/api-management/staff/${id}`);
    },
  };

  // Organizations API
  organizations = {
    institutions: {
      list: (filters: any = {}) => {
        const queryString = this.buildQueryString(filters);
        return this.request(`/api-management/organizations/institutions${queryString}`);
      },
      get: (id: string) => {
        return this.request(`/api-management/organizations/institutions/${id}`);
      },
    },
    departments: {
      list: (filters: any = {}) => {
        const queryString = this.buildQueryString(filters);
        return this.request(`/api-management/organizations/departments${queryString}`);
      },
      get: (id: string) => {
        return this.request(`/api-management/organizations/departments/${id}`);
      },
    },
    programs: {
      list: (filters: any = {}) => {
        const queryString = this.buildQueryString(filters);
        return this.request(`/api-management/organizations/programs${queryString}`);
      },
      get: (id: string) => {
        return this.request(`/api-management/organizations/programs/${id}`);
      },
    },
    degrees: {
      list: (filters: any = {}) => {
        const queryString = this.buildQueryString(filters);
        return this.request(`/api-management/organizations/degrees${queryString}`);
      },
      get: (id: string) => {
        return this.request(`/api-management/organizations/degrees/${id}`);
      },
    },
    courses: {
      list: (filters: any = {}) => {
        const queryString = this.buildQueryString(filters);
        return this.request(`/api-management/organizations/courses${queryString}`);
      },
      get: (id: string) => {
        return this.request(`/api-management/organizations/courses/${id}`);
      },
    },
    semesters: {
      list: (filters: any = {}) => {
        const queryString = this.buildQueryString(filters);
        return this.request(`/api-management/organizations/semesters${queryString}`);
      },
      get: (id: string) => {
        return this.request(`/api-management/organizations/semesters/${id}`);
      },
    },
  };
}

// Export singleton instance
export const apiClient = new MyJKKNApiClient(API_URL, API_KEY!);
export { MyJKKNApiClient };
'''

# Template for Vanilla JavaScript API Client
VANILLA_TEMPLATE = '''// MyJKKN API Client (Vanilla JavaScript)
// Generated by generate_api_client.py

class MyJKKNClient {
  constructor(apiKey, baseURL = 'https://jkkn.ai/api') {
    this.apiKey = apiKey;
    this.baseURL = baseURL;
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const { method = 'GET', headers = {}, body } = options;

    try {
      const response = await fetch(url, {
        method,
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          ...headers,
        },
        body: body ? JSON.stringify(body) : undefined,
      });

      if (!response.ok) {
        const error = await response.json().catch(() => ({ error: 'Request failed' }));
        throw new Error(error.error || `HTTP ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  buildQueryString(params) {
    const filtered = Object.entries(params).filter(
      ([_, value]) => value !== undefined && value !== null && value !== ''
    );

    if (filtered.length === 0) return '';

    return (
      '?' +
      filtered
        .map(([key, value]) =>
          `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`
        )
        .join('&')
    );
  }

  // Students API
  async fetchStudents(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/students${queryString}`);
  }

  async fetchStudent(id) {
    return this.request(`/api-management/students/${id}`);
  }

  // Staff API
  async fetchStaff(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/staff${queryString}`);
  }

  async fetchStaffMember(id) {
    return this.request(`/api-management/staff/${id}`);
  }

  // Institutions API
  async fetchInstitutions(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/institutions${queryString}`);
  }

  async fetchInstitution(id) {
    return this.request(`/api-management/organizations/institutions/${id}`);
  }

  // Departments API
  async fetchDepartments(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/departments${queryString}`);
  }

  async fetchDepartment(id) {
    return this.request(`/api-management/organizations/departments/${id}`);
  }

  // Programs API
  async fetchPrograms(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/programs${queryString}`);
  }

  async fetchProgram(id) {
    return this.request(`/api-management/organizations/programs/${id}`);
  }

  // Degrees API
  async fetchDegrees(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/degrees${queryString}`);
  }

  async fetchDegree(id) {
    return this.request(`/api-management/organizations/degrees/${id}`);
  }

  // Courses API
  async fetchCourses(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/courses${queryString}`);
  }

  async fetchCourse(id) {
    return this.request(`/api-management/organizations/courses/${id}`);
  }

  // Semesters API
  async fetchSemesters(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/semesters${queryString}`);
  }

  async fetchSemester(id) {
    return this.request(`/api-management/organizations/semesters/${id}`);
  }
}

// Export for ES modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = MyJKKNClient;
}
'''

# Template for Express.js Backend
EXPRESS_TEMPLATE = '''// MyJKKN API Client for Express.js Backend
// Generated by generate_api_client.py

const fetch = require('node-fetch');

class MyJKKNApiClient {
  constructor(apiKey, baseURL = 'https://jkkn.ai/api') {
    this.apiKey = apiKey;
    this.baseURL = baseURL;
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const { method = 'GET', headers = {}, body } = options;

    try {
      const response = await fetch(url, {
        method,
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          ...headers,
        },
        body: body ? JSON.stringify(body) : undefined,
      });

      if (!response.ok) {
        const error = await response.json().catch(() => ({ error: 'Request failed' }));
        const err = new Error(error.error || `HTTP ${response.status}`);
        err.status = response.status;
        throw err;
      }

      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  buildQueryString(params) {
    const filtered = Object.entries(params).filter(
      ([_, value]) => value !== undefined && value !== null && value !== ''
    );

    if (filtered.length === 0) return '';

    return (
      '?' +
      filtered
        .map(([key, value]) =>
          `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`
        )
        .join('&')
    );
  }

  // Students API
  async getStudents(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/students${queryString}`);
  }

  async getStudent(id) {
    return this.request(`/api-management/students/${id}`);
  }

  // Staff API
  async getStaff(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/staff${queryString}`);
  }

  async getStaffMember(id) {
    return this.request(`/api-management/staff/${id}`);
  }

  // Organizations API
  async getInstitutions(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/institutions${queryString}`);
  }

  async getDepartments(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/departments${queryString}`);
  }

  async getPrograms(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/programs${queryString}`);
  }

  async getDegrees(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/degrees${queryString}`);
  }

  async getCourses(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/courses${queryString}`);
  }

  async getSemesters(filters = {}) {
    const queryString = this.buildQueryString(filters);
    return this.request(`/api-management/organizations/semesters${queryString}`);
  }
}

module.exports = MyJKKNApiClient;
'''

FRAMEWORKS = {
    'nextjs': {
        'template': NEXTJS_TEMPLATE,
        'filename': 'client.ts',
        'description': 'Next.js/React TypeScript API Client'
    },
    'vanilla': {
        'template': VANILLA_TEMPLATE,
        'filename': 'client.js',
        'description': 'Vanilla JavaScript API Client'
    },
    'express': {
        'template': EXPRESS_TEMPLATE,
        'filename': 'myjkkn-client.js',
        'description': 'Express.js Backend API Client'
    }
}

def generate_client(framework: str, output_dir: str):
    """Generate API client for specified framework"""

    if framework not in FRAMEWORKS:
        print(f"Error: Unknown framework '{framework}'")
        print(f"Available frameworks: {', '.join(FRAMEWORKS.keys())}")
        sys.exit(1)

    # Get framework config
    config = FRAMEWORKS[framework]

    # Create output directory
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)

    # Write client file
    client_file = output_path / config['filename']
    with open(client_file, 'w') as f:
        f.write(config['template'])

    print(f"✅ Generated {config['description']}")
    print(f"📁 Location: {client_file}")
    print()
    print("Next steps:")
    print("1. Set environment variables:")
    if framework == 'nextjs':
        print("   NEXT_PUBLIC_MYJKKN_API_URL=https://jkkn.ai/api")
        print("   MYJKKN_API_KEY=your_api_key_here")
    else:
        print("   MYJKKN_API_URL=https://jkkn.ai/api")
        print("   MYJKKN_API_KEY=your_api_key_here")
    print()
    print("2. Import and use the client:")
    if framework == 'nextjs':
        print(f"   import {{ apiClient }} from '{output_dir}/{config['filename']}';")
        print("   const students = await apiClient.students.list({ page: 1 });")
    elif framework == 'vanilla':
        print(f"   import MyJKKNClient from '{output_dir}/{config['filename']}';")
        print("   const client = new MyJKKNClient('your_api_key');")
        print("   const students = await client.fetchStudents({ page: 1 });")
    else:
        print(f"   const MyJKKNApiClient = require('{output_dir}/{config['filename']}');")
        print("   const client = new MyJKKNApiClient(process.env.MYJKKN_API_KEY);")
        print("   const students = await client.getStudents({ page: 1 });")
    print()
    print("📚 For complete documentation, see:")
    print("   - .claude/skills/api-integration/references/api_endpoints.md")
    print("   - .claude/skills/api-integration/references/authentication_guide.md")

def main():
    parser = argparse.ArgumentParser(
        description='Generate MyJKKN API client for different frameworks',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  python generate_api_client.py --framework nextjs --output ./lib/api
  python generate_api_client.py --framework vanilla --output ./src/api
  python generate_api_client.py --framework express --output ./services

Available frameworks: nextjs, vanilla, express
        '''
    )

    parser.add_argument(
        '--framework',
        required=True,
        choices=list(FRAMEWORKS.keys()),
        help='Framework to generate client for'
    )

    parser.add_argument(
        '--output',
        required=True,
        help='Output directory for generated client'
    )

    args = parser.parse_args()

    generate_client(args.framework, args.output)

if __name__ == '__main__':
    main()
